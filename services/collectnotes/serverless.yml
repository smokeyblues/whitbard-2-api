service: whitebard-app-mono-collectnotes

# Use the serverless-webpack plugin to transpile ES6
plugins:
- serverless-webpack
- serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName:
      ${file(../database/serverless.yml):custom.tableName}
    csvBucket:
      'Fn::ImportValue': ${self:custom.stage}-WhitebardCSVBucket

  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:Query
    # Restrict our IAM role permissions to
    # the specific table for the stage
    Resource:
    - 'Fn::ImportValue': ${self:custom.stage}-WhitebardTableArn
  - Effect: Allow
    Action:
    - 's3:*'
    Resource:
      - Fn::Join: 'arn:aws:s3:::whitebard-app-mono-uploads-dev-whitebardcsvbucket-tf345c6q7pae/*'

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  collectNotes:
    handler: collectnotes.main
    events:
    - http:
        path: notes
        method: get
        cors: true
        authorizer: aws_iam
    - s3:
        bucket:
        event: s3:ObjectCreated:*
